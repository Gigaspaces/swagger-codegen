{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

abstract class {{classname}}Support extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport{
protected implicit val jsonFormats: Formats = DefaultFormats

protected val applicationDescription: String = "{{classname}}"
protected val applicationName: Option[String] = Some("{{basePathWithoutHost}}/{{baseName}}")

    before() {
        contentType = formats("json")
        response.headers += ("Access-Control-Allow-Origin" -> "*")
    }
{{#operations}}
{{#operation}}
{{newline}}

    def {{nickname}}({{#allParams}}{{paramName}}:{{>paramType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}):Unit

    {{httpMethod}}("{{{vendorExtensions.x-scalatra-path}}}") {
    {{#allParams}}{{#isFile}}
    val {{paramName}} = fileParams("{{paramName}}"){{/isFile}}{{^isFile}}{{#isPathParam}}
    val {{paramName}} = params.getAs[{{dataType}}]("{{paramName}}"){{/isPathParam}}
    {{>queryParamOperation}}{{>headerParamOperation}}{{>formParamMustache}}{{>bodyParamOperation}}{{/isFile}}
    {{/allParams}}
    {{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    }

{{/operation}}
{{/operations}}
}
