{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.scalatra.json.JacksonJsonSupport
import org.scalatra.servlet.FileUploadSupport

abstract class {{classname}} (implicit val swagger: Swagger) extends ScalatraServlet
with FileUploadSupport
with JacksonJsonSupport
with SwaggerSupport {
protected implicit val jsonFormats: Formats = DefaultFormats

protected val applicationDescription: String = "{{classname}}"
override protected val applicationName: Option[String] = Some("{{basePathWithoutHost}}/{{baseName}}")

    before() {
        contentType = formats("json")
        response.headers += ("Access-Control-Allow-Origin" -> "*")
    }
    {{#operations}}
    {{#operation}}
    {{newline}}
    val {{nickname}}Operation =
        (apiOperation[{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}}]("{{nickname}}")
        summary "{{{summary}}}"
        parameters({{#allParams}}{{>queryParam}}{{>pathParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}))

    def {{nickname}}({{#allParams}}{{paramName}}:{{>paramType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}):Any

    {{httpMethod}}("{{{vendorExtensions.x-scalatra-path}}}",operation({{nickname}}Operation)) {
        {{#allParams}}{{#isFile}}
            val {{paramName}} = fileParams("{{paramName}}"){{/isFile}}{{^isFile}}{{#isPathParam}}
            val {{paramName}} = params.getAs[{{dataType}}]("{{paramName}}"){{/isPathParam}}
        {{>queryParamOperation}}{{>headerParamOperation}}{{>formParamMustache}}{{>bodyParamOperation}}{{/isFile}}{{/allParams}}{{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}
        {{/allParams}})
    }
    {{/operation}}
    {{/operations}}
}
