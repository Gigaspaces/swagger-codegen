{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class {{classname}} (override implicit val swagger: Swagger) extends {{classname}}Support
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
    override protected implicit val jsonFormats: Formats = DefaultFormats

  override protected val applicationDescription: String = "{{classname}}"
  override protected val applicationName: Option[String] = Some("{{basePathWithoutHost}}/{{baseName}}")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
{{#operations}}
{{#operation}}
    {{newline}}
  def {{nickname}} = {
  {{#allParams}}
      {{#isFile}}val {{paramName}} = fileParams("{{paramName}}"){{/isFile}}
      {{^isFile}}{{#isPathParam}}
          val {{paramName}} = params.getOrElse("{{paramName}}", halt(400)){{/isPathParam}}
      {{>queryParamOperation}}{{>headerParamOperation}}{{>formParamMustache}}{{>bodyParamOperation}}
      {{/isFile}}
      println("{{paramName}}: " + {{paramName}})
  {{/allParams}}
  }
{{/operation}}
{{/operations}}
}
